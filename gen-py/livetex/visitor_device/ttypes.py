# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import livetex.capabilities.ttypes
import livetex.options.ttypes
import livetex.token.ttypes
import livetex.device.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class VisitorDevice:
  """
  Данные посетителя.


  capabilities: список поддерживаемых клиентом возможностей.

  application: идентификатор приложения посетителя.

  key: ключи доступа для работы с LiveTex.

  deviceId: уникальный идентификатор устройства.

  deviceType: идентификатор типа устройства.

  token: уникальный ключь клиента, если ключ не передан генерируется новый.

  Attributes:
   - capabilities
   - application
   - key
   - deviceId
   - deviceType
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'capabilities', (TType.I32,None), None, ), # 1
    (2, TType.STRING, 'application', None, None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.STRING, 'deviceId', None, None, ), # 4
    (5, TType.I32, 'deviceType', None, None, ), # 5
    (6, TType.STRING, 'token', None, None, ), # 6
  )

  def __init__(self, capabilities=None, application=None, key=None, deviceId=None, deviceType=None, token=None,):
    self.capabilities = capabilities
    self.application = application
    self.key = key
    self.deviceId = deviceId
    self.deviceType = deviceType
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.capabilities = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.capabilities.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.application = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.deviceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisitorDevice')
    if self.capabilities is not None:
      oprot.writeFieldBegin('capabilities', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.capabilities))
      for iter6 in self.capabilities:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.application is not None:
      oprot.writeFieldBegin('application', TType.STRING, 2)
      oprot.writeString(self.application)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 4)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.deviceType is not None:
      oprot.writeFieldBegin('deviceType', TType.I32, 5)
      oprot.writeI32(self.deviceType)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 6)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.capabilities is None:
      raise TProtocol.TProtocolException(message='Required field capabilities is unset!')
    if self.application is None:
      raise TProtocol.TProtocolException(message='Required field application is unset!')
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.deviceId is None:
      raise TProtocol.TProtocolException(message='Required field deviceId is unset!')
    if self.deviceType is None:
      raise TProtocol.TProtocolException(message='Required field deviceType is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
