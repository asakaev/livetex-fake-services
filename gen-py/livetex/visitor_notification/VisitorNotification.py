# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Сервис оповещения посетителя о событиях системы.
  """
  def ban(self, message):
    """
    Оповещение посетителя о блокировке.


    @param message - сообщение блокировки.

    Parameters:
     - message
    """
    pass

  def updateDialogState(self, dialogState):
    """
    Оповещение об изменении состояния сервиса диалога.


    @param state - новое состояние интерфейса сервиса диалога.

    Parameters:
     - dialogState
    """
    pass

  def receiveFileMessage(self, message):
    """
    Оповещение о переданном файле.


    @param message - cообещение передачи файла.

    Parameters:
     - message
    """
    pass

  def receiveTextMessage(self, message):
    """
    Оповещение о переданном текстовом сообщении.


    @param message - текстовое cообещение.

    Parameters:
     - message
    """
    pass

  def confirmTextMessage(self, messageId):
    """
    Оповещение о подтверждении переданного текстовом сообщении.


    @param message - текстовое cообещение.

    Parameters:
     - messageId
    """
    pass

  def receiveHoldMessage(self, message):
    """
    Оповещение о новом удерживающем сообщении.


    @param message - удерживающее cообещение.

    Parameters:
     - message
    """
    pass

  def receiveTypingMessage(self, message):
    """
    Оповещение о наборе текста.


    @param message - сообщение оповещения о наборе текста.

    Parameters:
     - message
    """
    pass


class Client(Iface):
  """
  Сервис оповещения посетителя о событиях системы.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ban(self, message):
    """
    Оповещение посетителя о блокировке.


    @param message - сообщение блокировки.

    Parameters:
     - message
    """
    self.send_ban(message)

  def send_ban(self, message):
    self._oprot.writeMessageBegin('ban', TMessageType.CALL, self._seqid)
    args = ban_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def updateDialogState(self, dialogState):
    """
    Оповещение об изменении состояния сервиса диалога.


    @param state - новое состояние интерфейса сервиса диалога.

    Parameters:
     - dialogState
    """
    self.send_updateDialogState(dialogState)

  def send_updateDialogState(self, dialogState):
    self._oprot.writeMessageBegin('updateDialogState', TMessageType.CALL, self._seqid)
    args = updateDialogState_args()
    args.dialogState = dialogState
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def receiveFileMessage(self, message):
    """
    Оповещение о переданном файле.


    @param message - cообещение передачи файла.

    Parameters:
     - message
    """
    self.send_receiveFileMessage(message)

  def send_receiveFileMessage(self, message):
    self._oprot.writeMessageBegin('receiveFileMessage', TMessageType.CALL, self._seqid)
    args = receiveFileMessage_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def receiveTextMessage(self, message):
    """
    Оповещение о переданном текстовом сообщении.


    @param message - текстовое cообещение.

    Parameters:
     - message
    """
    self.send_receiveTextMessage(message)

  def send_receiveTextMessage(self, message):
    self._oprot.writeMessageBegin('receiveTextMessage', TMessageType.CALL, self._seqid)
    args = receiveTextMessage_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def confirmTextMessage(self, messageId):
    """
    Оповещение о подтверждении переданного текстовом сообщении.


    @param message - текстовое cообещение.

    Parameters:
     - messageId
    """
    self.send_confirmTextMessage(messageId)

  def send_confirmTextMessage(self, messageId):
    self._oprot.writeMessageBegin('confirmTextMessage', TMessageType.CALL, self._seqid)
    args = confirmTextMessage_args()
    args.messageId = messageId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def receiveHoldMessage(self, message):
    """
    Оповещение о новом удерживающем сообщении.


    @param message - удерживающее cообещение.

    Parameters:
     - message
    """
    self.send_receiveHoldMessage(message)

  def send_receiveHoldMessage(self, message):
    self._oprot.writeMessageBegin('receiveHoldMessage', TMessageType.CALL, self._seqid)
    args = receiveHoldMessage_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def receiveTypingMessage(self, message):
    """
    Оповещение о наборе текста.


    @param message - сообщение оповещения о наборе текста.

    Parameters:
     - message
    """
    self.send_receiveTypingMessage(message)

  def send_receiveTypingMessage(self, message):
    self._oprot.writeMessageBegin('receiveTypingMessage', TMessageType.CALL, self._seqid)
    args = receiveTypingMessage_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ban"] = Processor.process_ban
    self._processMap["updateDialogState"] = Processor.process_updateDialogState
    self._processMap["receiveFileMessage"] = Processor.process_receiveFileMessage
    self._processMap["receiveTextMessage"] = Processor.process_receiveTextMessage
    self._processMap["confirmTextMessage"] = Processor.process_confirmTextMessage
    self._processMap["receiveHoldMessage"] = Processor.process_receiveHoldMessage
    self._processMap["receiveTypingMessage"] = Processor.process_receiveTypingMessage

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ban(self, seqid, iprot, oprot):
    args = ban_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.ban(args.message)
    return

  def process_updateDialogState(self, seqid, iprot, oprot):
    args = updateDialogState_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.updateDialogState(args.dialogState)
    return

  def process_receiveFileMessage(self, seqid, iprot, oprot):
    args = receiveFileMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.receiveFileMessage(args.message)
    return

  def process_receiveTextMessage(self, seqid, iprot, oprot):
    args = receiveTextMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.receiveTextMessage(args.message)
    return

  def process_confirmTextMessage(self, seqid, iprot, oprot):
    args = confirmTextMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.confirmTextMessage(args.messageId)
    return

  def process_receiveHoldMessage(self, seqid, iprot, oprot):
    args = receiveHoldMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.receiveHoldMessage(args.message)
    return

  def process_receiveTypingMessage(self, seqid, iprot, oprot):
    args = receiveTypingMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.receiveTypingMessage(args.message)
    return


# HELPER FUNCTIONS AND STRUCTURES

class ban_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ban_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDialogState_args:
  """
  Attributes:
   - dialogState
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'dialogState', (livetex.dialog_state.ttypes.DialogState, livetex.dialog_state.ttypes.DialogState.thrift_spec), None, ), # 1
  )

  def __init__(self, dialogState=None,):
    self.dialogState = dialogState

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.dialogState = livetex.dialog_state.ttypes.DialogState()
          self.dialogState.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDialogState_args')
    if self.dialogState is not None:
      oprot.writeFieldBegin('dialogState', TType.STRUCT, 1)
      self.dialogState.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class receiveFileMessage_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'message', (livetex.message.ttypes.FileMessage, livetex.message.ttypes.FileMessage.thrift_spec), None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.message = livetex.message.ttypes.FileMessage()
          self.message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('receiveFileMessage_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRUCT, 1)
      self.message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class receiveTextMessage_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'message', (livetex.message.ttypes.TextMessage, livetex.message.ttypes.TextMessage.thrift_spec), None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.message = livetex.message.ttypes.TextMessage()
          self.message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('receiveTextMessage_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRUCT, 1)
      self.message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirmTextMessage_args:
  """
  Attributes:
   - messageId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'messageId', None, None, ), # 1
  )

  def __init__(self, messageId=None,):
    self.messageId = messageId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.messageId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirmTextMessage_args')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.STRING, 1)
      oprot.writeString(self.messageId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class receiveHoldMessage_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'message', (livetex.message.ttypes.HoldMessage, livetex.message.ttypes.HoldMessage.thrift_spec), None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.message = livetex.message.ttypes.HoldMessage()
          self.message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('receiveHoldMessage_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRUCT, 1)
      self.message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class receiveTypingMessage_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'message', (livetex.message.ttypes.TypingMessage, livetex.message.ttypes.TypingMessage.thrift_spec), None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.message = livetex.message.ttypes.TypingMessage()
          self.message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('receiveTypingMessage_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRUCT, 1)
      self.message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
